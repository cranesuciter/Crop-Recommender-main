# -*- coding: utf-8 -*-
# """Copie de MovieRecomendationProject2.ipynb

# Automatically generated by Colaboratory.

# Original file is located at
#     https://colab.research.google.com/drive/19STr5fx9W50OHJlDvCh20GkcfdclX-84
# """

#pip install surprise

#First we import all lib that we need for the project

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from ast import literal_eval
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.metrics.pairwise import linear_kernel, cosine_similarity
from nltk.stem.snowball import SnowballStemmer
from nltk.stem.wordnet import WordNetLemmatizer
from nltk.corpus import wordnet
from surprise import Reader, Dataset, SVD
from surprise.model_selection import cross_validate

import warnings; warnings.simplefilter('ignore')

#Define path of all csv files
path = "./"


class Movies:
  lo = pd.read_csv(path + 'movies_metadata.csv')
  title = lo.title
  print(lo.title)


#Read main csv with film and many informations
md = pd.read_csv(path + "movies_metadata.csv")
md.head()

#Keep only names of genre and not a object
md['genres'] = md['genres'].fillna('[]').apply(literal_eval).apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])
md['genres']

#Make a Weighted Rating about vote count and rating
#Weighted Rating (WR) =  (v/(v+m)*R)+(m/(v+m)*C) 
#where,

#v is the number of votes for the movie
#m is the minimum votes required to be listed in the chart
#R is the average rating of the movie
#C is the mean vote across the whole report

vote_counts = md[md['vote_count'].notnull()]['vote_count'].astype('int')
vote_averages = md[md['vote_average'].notnull()]['vote_average'].astype('int')
C = vote_averages.mean()
C

m = vote_counts.quantile(0.95)
m

qualified = md[(md['vote_count'] >= m) & (md['vote_count'].notnull()) & (md['vote_average'].notnull())][['title', 'vote_count', 'vote_average', 'popularity', 'genres']]
qualified['vote_count'] = qualified['vote_count'].astype('int')
qualified['vote_average'] = qualified['vote_average'].astype('int')
qualified.shape

def weighted_rating(x):
    v = x['vote_count']
    R = x['vote_average']
    return (v/(v+m) * R) + (m/(m+v) * C)

#Create this Weighted Rating in a column name wr and sort this columns after

qualified['wr'] = qualified.apply(weighted_rating, axis=1)

qualified = qualified.sort_values('wr', ascending=False).head(250)

# Matrice des corrélations : 
cor = qualified.corr() 
sns.heatmap(cor, square = True, cmap="coolwarm",linewidths=.5,annot=True )
#Pour choisr la couleur du heatmap : https://matplotlib.org/examples/color/colormaps_reference.html

#Thanks to this Weighted Rating we have a base of project and what we do it the begining

#Load link and filter the main dataframe in a new value smd more smaller

links_small = pd.read_csv(path + 'links_small.csv')
links_small

links_small = links_small[links_small['tmdbId'].notnull()]['tmdbId'].astype('int')

md = md.drop([19730, 29503, 35587])

#Check EDA Notebook for how and why I got these indices.
md['id'] = md['id'].astype('int')

smd = md[md['id'].isin(links_small)]
smd.shape

#Now we have only 9099 row it better to work than 3 times that

#Now we load 2 more csv creadits and keywords to make filter by job and keywords

credits = pd.read_csv(path + 'credits.csv')
keywords = pd.read_csv(path + 'keywords.csv')

keywords['id'] = keywords['id'].astype('int')
credits['id'] = credits['id'].astype('int')

md.shape

#Merge on the dataframe on movie id

md = md.merge(credits, on='id')
md = md.merge(keywords, on='id')

#Make short dataframe thanks to links_small based on id

smd = md[md['id'].isin(links_small)]
smd.shape

smd['crew'] = smd['crew'].apply(literal_eval)
smd['keywords'] = smd['keywords'].apply(literal_eval)

#Parse the crew columns and get only if the job of the object is Director

def get_director(x):
    for i in x:
        if i['job'] == 'Director':
            return i['name']
    return np.nan

smd['director'] = smd['crew'].apply(get_director)
smd['director']

#Delete space and copy 3 times in a tab each times for future

smd['director'] = smd['director'].astype('str').apply(lambda x: str.lower(x.replace(" ", "")))
smd['director'] = smd['director'].apply(lambda x: [x,x, x])
smd['director']

#Now let we parse keywords column to keep only the name of the object

smd['keywords'] = smd['keywords'].apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])
smd['keywords']

s = smd.apply(lambda x: pd.Series(x['keywords']),axis=1).stack().reset_index(level=1, drop=True)
s.name = 'keyword'

#Count the most keywords

s = s.value_counts()
s[:5]

s = s[s > 1]

def filter_keywords(x):
    words = []
    for i in x:
        if i in s:
            words.append(i)
    return words

#Delete spaces and put in a tab if the words is in the most words

smd['keywords'] = smd['keywords'].apply(filter_keywords)
smd['keywords'] = smd['keywords'].apply(lambda x: [str.lower(i.replace(" ", "")) for i in x])
smd['keywords']

#Make a melange of keywords, directory and genres in the columns soup

smd['soup'] = smd['keywords']  + smd['director'] + smd['genres']
smd['soup'] = smd['soup'].apply(lambda x: ' '.join(x))

#Create a Matrix with all word

count = CountVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')
count_matrix = count.fit_transform(smd['soup'])

#Mathematical Cosinus

cosine_sim = cosine_similarity(count_matrix, count_matrix)

smd = smd.reset_index()
titles = smd['title']
indices = pd.Series(smd.index, index=smd['title'])

reader = Reader()

#Load ratings of users for each movies they like

ratings = pd.read_csv(path + 'ratings_small.csv')
ratings.head()

# Matrice des corrélations : 
cor = ratings.corr() 
sns.heatmap(cor, square = True, cmap="coolwarm",linewidths=.5,annot=True )
#Pour choisr la couleur du heatmap : https://matplotlib.org/examples/color/colormaps_reference.html

data = Dataset.load_from_df(ratings[['userId', 'movieId', 'rating']], reader)

#The cross_validate() function runs a cross-validation procedure according to the cv argument, and computes some accuracy measures.
#We are here using a classical 5-fold cross-validation, but fancier iterators can be used (see here).

svd = SVD()
cross_validate(svd, data, measures=['RMSE', 'MAE'], cv=5)

#Train the algo and predict after it

trainset = data.build_full_trainset()
svd.fit(trainset)

ratings[ratings['userId'] == 1]

svd.predict(1, 302, 3)

def convert_int(x):
    try:
        return int(x)
    except:
        return np.nan

#Merge ratings and title with id in id_map

id_map = pd.read_csv(path + 'links_small.csv')[['movieId', 'tmdbId']]
id_map['tmdbId'] = id_map['tmdbId'].apply(convert_int)
id_map.columns = ['movieId', 'id']
id_map = id_map.merge(smd[['title', 'id']], on='id').set_index('title')

indices_map = id_map.set_index('id')
indices_map

#Get the higher scores with the cosine tab and get the movieid of the top 26
#After that get more title of the movie
#and predict with the id_user and all 26 idMovie with the algo and after sort result

def hybrid(userId, title):
    idx = indices[title]
    
    sim_scores = list(enumerate(cosine_sim[int(idx)]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:26]
    movie_indices = [i[0] for i in sim_scores]
    
    movies = smd.iloc[movie_indices][['title', 'id']]
    movies['est'] = movies['id'].apply(lambda x: svd.predict(userId, indices_map.loc[x]['movieId']).est)
    movies = movies.sort_values('est', ascending=False)
    return movies.head(10)